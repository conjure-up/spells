#!/bin/bash

# Dont -x because we sed passwords in this script, which means they would be
# exposed in the conjure-up logs. Make no mistakes and -x wont be needed.
set -eu

. "$CONJURE_UP_SPELLSDIR/sdk/common.sh"

# gather vars (stripping quotes) for later config and result message
grafana_public_ip=$(unitAddress grafana)
grafana_port=$(juju config -m "$JUJU_CONTROLLER:$JUJU_MODEL" grafana port | sed -e 's/"//g')
kube_client_pass=$(juju run -m "$JUJU_CONTROLLER:$JUJU_MODEL" --unit kubernetes-master/0 'cut -d, -f1 /root/cdk/basic_auth.csv')
kube_ingress_ip=$(juju run -m "$JUJU_CONTROLLER:$JUJU_MODEL" --unit kubeapi-load-balancer/0 'network-get website --format yaml --ingress-address' | head -1)

# if we didnt get a load balancer ip, fall back to the private address
# NB: use private ip so we dont waste resources scraping the public address
if [[ -z "${kube_ingress_ip}" ]]; then
  kube_ingress_ip=$(juju run -m "$JUJU_CONTROLLER:$JUJU_MODEL" --unit kubeapi-load-balancer/0 'unit-get private-address' | head -1)
fi

# configure k8s prometheus scraper
juju config -m "$JUJU_CONTROLLER:$JUJU_MODEL" prometheus \
  scrape-jobs="$(sed -e s/K8S_PASSWORD/$kube_client_pass/g -e s/K8S_API_ENDPOINT/$kube_ingress_ip/g $(scriptPath)/prometheus-scrape-k8s.yaml)"

# setup grafana dashboards
juju run-action -m "$JUJU_CONTROLLER:$JUJU_MODEL" --wait grafana/0 \
  import-dashboard dashboard="$(base64 $(scriptPath)/grafana-k8s.json)"
# NB: recent grafana charm includes a nice telegraf dashboard by default;
# however, if not all metrics are available, the dashboard will not load:
#   Skipping Dashboard Template: Telegraf.json.j2 no metric net_link_mtu
# Import a known good dashboard so users at least have something to build on.
juju run-action -m "$JUJU_CONTROLLER:$JUJU_MODEL" --wait grafana/0 \
  import-dashboard dashboard="$(base64 $(scriptPath)/grafana-telegraf.json)"

setResult "The Grafana UI is available at: http://$grafana_public_ip:$grafana_port. \
Retrieve the admin password with 'juju run-action --wait grafana/0 get-admin-password'."

# NB: if we ever include a metric provider that doesn't support the
# prometheus:target relation, we may want to explore the prom_reg layer:
#  https://git.launchpad.net/~prometheus-registration-developers/prometheus-registration/+git/layer-promreg-client/tree/README.md
#  https://git.launchpad.net/~prometheus-registration-developers/prometheus-registration/tree/README.md
# For example, if telegraf didn't support a direct prometheus relation, we
# would configure it like this:
#
#prom_ingress_ip=$(juju run --unit prometheus/0 'network-get target --format yaml --ingress-address' | head -1)
#prom_port=$(juju config prometheus prometheus_registration_port | sed -e 's/"//g')
#prom_token=$(juju config prometheus prometheus_registration_authtoken | sed -e 's/"//g')
#
#juju config prometheus prometheus_registration_listen='0.0.0.0'
#juju config telegraf promreg_authtoken="$prom_token" \
#                     promreg_url="http://$prom_ingress_ip:$prom_port"

exit 0
