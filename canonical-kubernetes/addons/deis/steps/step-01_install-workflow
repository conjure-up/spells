#!/bin/bash

set -eux

. "$CONJURE_UP_SPELLSDIR/sdk/common.sh"
. "$CONJURE_UP_SPELLSDIR/$CONJURE_UP_SPELL/addons/common.sh"

export KUBECONFIG=$HOME/.kube/config.$JUJU_MODEL

echo "Installing Deis CLI"
curl -fsSL -o $HOME/bin/deis  https://storage.googleapis.com/workflow-cli-release/deis-stable-linux-amd64
chmod +x $HOME/bin/deis

install_helm

check_ready_replicas() {
    local ready_replicas="$(kubectl -n kube-system get deployment tiller-deploy -o json|jq '.status.readyReplicas // 0')"
    local replicas="$(kubectl -n kube-system get deployment tiller-deploy -o json|jq '.status.replicas // 0')"
    [[ "$ready_replicas" -eq "$replicas" ]]
}

wait_replica_ready=0
while ! check_ready_replicas; do
    echo "Waiting for tiller pod to become ready (try $wait_replica_ready/15)"
    if [[ "$wait_replica_ready" -gt 15 ]]; then
        break
    fi
    ((wait_replica_ready=wait_replica_ready+1))
    sleep 10
done

echo "Adding Deis chart"
helm repo add deis https://charts.deis.com/workflow

echo "Install Deis workflow"
aws_secret_access_key="$(aws configure get --profile "$JUJU_CREDENTIAL" aws_secret_access_key)"
aws_access_key_id="$(aws configure get --profile "$JUJU_CREDENTIAL" aws_access_key_id)"

bucket_id=$(pwgen -0AB 4 1)
helm install deis/workflow --namespace deis \
     --set global.storage=s3,global.use_cni=true,s3.accesskey="$aws_access_key_id",s3.secretkey="$aws_secret_access_key",s3.region="$JUJU_REGION",s3.registry_bucket="$DEIS_S3_REGISTRY_BUCKET-$bucket_id",s3.builder_bucket="$DEIS_S3_BUILDER_BUCKET-$bucket_id",s3.database_bucket="$DEIS_S3_DATABASE_BUCKET-$bucket_id"

echo "Get AWS ELB hostname"
aws_elb_host="$(kubectl --namespace=deis get svc deis-router -ojson|jq -r .status.loadBalancer.ingress[0].hostname)"

echo "Get AWS name"
aws_elb_name="$(echo $aws_elb_host|cut -d- -f1)"

echo "Update timeout settings for elb"
aws elb modify-load-balancer-attributes \
    --profile "$JUJU_CREDENTIAL" \
    --region "$JUJU_REGION" \
    --load-balancer-name  "$aws_elb_name" \
    --load-balancer-attributes "{\"ConnectionSettings\":{\"IdleTimeout\":1200}}"

while ! host "$aws_elb_host"; do
    echo "Waiting for host resolution to load balancer"
    sleep 10
done
hostname="$(mapfile -t host_array <<< $(host "$aws_elb_host") && echo ${host_array[0]} | cut -d ' ' -f4)"

setKey "deis-register-url" "http://deis.$hostname.nip.io"
setKey "deis-elb-host" "$hostname.nip.io"

exit 0
