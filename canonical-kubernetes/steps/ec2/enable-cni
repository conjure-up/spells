#!/bin/bash

set -eu

data_dir="$(dirname "$BASH_SOURCE")"
aws_account_id=$(aws --profile "$JUJU_CREDENTIAL" sts get-caller-identity --output text --query 'Account')

abort() {
    >&2 echo "$@"
    echo "Unable to enable AWS integration"
    setResult "Unable to enable AWS integration (see logs for details)"
    exit 0
}

load_iam_policy() {
    role="$1"  # master or worker
    echo "Creating IAM policy: juju-kubernetes-$role"
    if ! result=$(aws iam create-policy \
                  --profile "$JUJU_CREDENTIAL" \
                  --policy-name "juju-kubernetes-$role" \
                  --policy-document "file://$data_dir/policy-$role.json" \
                  --query 'Policy.PolicyId' \
                  --output text 2>&1); then
        if [[ "$result" == *"already exists"* ]]; then
            >&2 echo "IAM policy juju-kubernetes-$role already exists"
            return
        fi
        abort "$result"
    fi
    >&2 echo "IAM policy juju-kubernetes-$role created: $result"
}

load_iam_role() {
    role="$1"  # master or worker
    echo "Creating IAM role: juju-kubernetes-$role"
    if ! result=$(aws iam create-role \
                  --profile "$JUJU_CREDENTIAL" \
                  --role-name "juju-kubernetes-$role" \
                  --assume-role-policy-document "file://$data_dir/role.json" \
                  --query 'Role.RoleId' \
                  --output text 2>&1); then
        if [[ "$result" == *"already exists"* ]]; then
            >&2 echo "IAM role juju-kubernetes-$role already exists"
            return
        fi
        abort "$result"
    fi
    >&2 echo "IAM role juju-kubernetes-$role created: $result"
}

create_instance_profile() {
    role="$1"  # master or worker
    echo "Creating instance profile: juju-kubernetes-$role"
    if ! result=$(aws iam create-instance-profile \
                  --profile "$JUJU_CREDENTIAL" \
                  --instance-profile-name "juju-kubernetes-$role" \
                  --query 'InstanceProfile.InstanceProfileId' \
                  --output text 2>&1); then
        if [[ "$result" == *"already exists"* ]]; then
            >&2 echo "Instance profile juju-kubernetes-$role already exists"
            return
        fi
        abort "$result"
    fi
    >&2 echo "Instance profile juju-kubernetes-$role created: $result"
}

attach_policy_to_role() {
    role="$1"  # master or worker
    echo "Attaching IAM policy juju-kubernetes-$role to IAM role juju-kubernetes-$role"
    if ! result=$(aws iam attach-role-policy \
                  --profile "$JUJU_CREDENTIAL" \
                  --role-name "juju-kubernetes-$role" \
                  --policy-arn "arn:aws:iam::$aws_account_id:policy/juju-kubernetes-$role" 2>&1); then
        abort "$result"
    fi
    >&2 echo "IAM policy juju-kubernetes-$role attached to IAM role juju-kubernetes-$role"
}

add_role_to_profile() {
    role="$1"  # master or worker
    echo "Adding IAM role juju-kubernetes-$role to instance profile juju-kubernetes-$role"
    if ! result=$(aws iam add-role-to-instance-profile \
                  --profile "$JUJU_CREDENTIAL" \
                  --role-name "juju-kubernetes-${role}" \
                  --instance-profile-name "juju-kubernetes-$role" 2>&1); then
        if [[ "$result" == *"Cannot exceed quota"* ]]; then
            >&2 echo "IAM role juju-kubernetes-$role already on instance profile juju-kubernetes-$role"
            return
        fi
        abort "$result"
    fi
    >&2 echo "IAM role juju-kubernetes-$role added to instance profile juju-kubernetes-$role"
}

attach_profile_to_instances() {
    role="$1"  # master or worker
    # shellcheck disable=SC2016
    jmes_query='Reservations[*].Instances[*].[join(`,`, [@.InstanceId,(@.Tags[?Key==`juju-units-deployed`].Value)[0]])]'
    if ! instances=$(aws ec2 describe-instances \
                     --profile "$JUJU_CREDENTIAL" \
                     --output text \
                     --filters "Name=tag:juju-units-deployed,Values=*kubernetes-$role*" \
                               "Name=instance-state-name,Values=running" \
                     --query "$jmes_query" 2>&1); then
        abort "$instances"
    fi
    if [[ -z "$instances" ]]; then
        abort "Unable to find kubernetes-$role instances"
    fi
    for instance in $instances; do
        instance_id="$(cut -d, -f1 <<< "$instance")"
        unit_name="$(cut -d, -f2 <<< "$instance")"
        echo "Attaching instance profile juju-kubernetes-$role to $unit_name"
        if ! result=$(aws ec2 associate-iam-instance-profile \
                      --profile "$JUJU_CREDENTIAL" \
                      --iam-instance-profile Name="juju-kubernetes-$role" \
                      --instance-id "$instance_id" \
                      --query 'IamInstanceProfileAssociation.AssociationId' \
                      --output text 2>&1); then
            abort "$result"
        fi
        >&2 echo "Instance $instance_id ($unit_name) associated with profile juju-kubernetes-$role: $result"
    done
}

enable_cni() {
    load_iam_policy master
    load_iam_policy worker
    load_iam_role master
    load_iam_role worker
    create_instance_profile master
    create_instance_profile worker
    attach_policy_to_role master
    attach_policy_to_role worker
    add_role_to_profile master
    add_role_to_profile worker
    attach_profile_to_instances master
    attach_profile_to_instances worker
}
